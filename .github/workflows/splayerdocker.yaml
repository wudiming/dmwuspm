name: 构建SPlayer-Pro Docker镜像

on:
  workflow_dispatch:
  schedule:
    - cron: '0 4 * * 1'  # 每周一上午 8 点（北京时间）

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    env:
      PROJECT_DIR: SPlayer
      LOCAL_TAG_FILE: temp/tag.md

    steps:
      - name: Checkout 当前仓库
        uses: actions/checkout@v4

      - name: 获取远程版本号（支持 fallback）
        id: get_release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "尝试从 releases/latest 获取 tag..."
          tag=$(curl -s -H "Authorization: token $GH_TOKEN" https://api.github.com/repos/MoeFurina/SPlayer/releases/latest | jq -r .tag_name)

          if [ "$tag" = "null" ] || [ -z "$tag" ]; then
            echo "fallback 到 tags..."
            tag=$(curl -s https://api.github.com/repos/MoeFurina/SPlayer/tags | jq -r '.[0].name')
          fi

          echo "RELEASE_TAG=$tag" >> $GITHUB_ENV
          echo "latest_tag=$tag" >> $GITHUB_OUTPUT

      - name: 读取本地版本号
        id: read_old_tag
        run: |
          mkdir -p temp
          if [ -f "${{ env.LOCAL_TAG_FILE }}" ]; then
            tag=$(cat "${{ env.LOCAL_TAG_FILE }}" | tr -d '\n')
          else
            tag=""
          fi
          echo "old_tag=$tag" >> $GITHUB_OUTPUT

      - name: 比对新旧版本
        id: compare
        run: |
          if [ "${{ steps.read_old_tag.outputs.old_tag }}" = "${{ steps.get_release.outputs.latest_tag }}" ]; then
            echo "same=true" >> $GITHUB_OUTPUT
          else
            echo "same=false" >> $GITHUB_OUTPUT
          fi

      - name: 跳过构建（版本一致）
        if: steps.compare.outputs.same == 'true'
        run: echo "版本一致，跳过构建流程。"

      - name: 克隆 SPlayer 源码
        if: steps.compare.outputs.same == 'false'
        run: git clone https://github.com/MoeFurina/SPlayer.git

      - name: 配置环境变量（修改 .env）
        if: steps.compare.outputs.same == 'false'
        working-directory: ./SPlayer
        run: |
          cp -p .env.example .env
          python3 <<"EOF"
          import re
          from pathlib import Path
          replacements = {
              'RENDERER_VITE_SERVER_URL': {
                  'value': 'https://musicapi.881128.xyz',
                  'pattern': r'^(RENDERER_VITE_SERVER_URL\s*=\s*)(["\']?)(.*?)(["\']?)(\s*#.*)?$'
              },
              'RENDERER_VITE_SITE_URL': {
                  'value': 'https://music.881128.xyz',
                  'pattern': r'^(RENDERER_VITE_SITE_URL\s*=\s*)(["\']?)(.*?)(["\']?)(\s*#.*)?$'
              }
          }
          env_file = Path('.env')
          content = env_file.read_text()
          modified = 0
          for key, cfg in replacements.items():
              pattern = re.compile(cfg['pattern'], re.MULTILINE | re.IGNORECASE)
              new_content, count = re.subn(pattern, lambda m: f"{m.group(1)}{cfg['value']}{m.group(5) or ''}", content)
              if count > 0:
                  content = new_content
                  modified += 1
              else:
                  content += f"\n{key}={cfg['value']}"
                  modified += 1
          if modified != 2:
              raise ValueError(f"应修改2个配置项，实际修改{modified}")
          content = '\n'.join(line.rstrip() for line in content.splitlines())
          env_file.write_text(content + '\n')
          EOF

      - name: 安装依赖并构建 SPlayer
        if: steps.compare.outputs.same == 'false'
        working-directory: ./SPlayer
        run: |
          corepack enable
          corepack prepare pnpm@latest --activate
          pnpm install
          pnpm build

      - name: 添加 Dockerfile
        if: steps.compare.outputs.same == 'false'
        working-directory: ./SPlayer
        run: |
          cat <<'EOF' > Dockerfile
          FROM nginx:1.25.3-alpine-slim

          COPY ./out/renderer /usr/share/nginx/html
          COPY ./nginx.conf /etc/nginx/conf.d/default.conf

          CMD ["nginx", "-g", "daemon off;"]
          EOF

      - name: 设置 Docker Buildx
        if: steps.compare.outputs.same == 'false'
        uses: docker/setup-buildx-action@v3

      - name: 登录 Docker Hub
        if: steps.compare.outputs.same == 'false'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 构建并推送镜像
        if: steps.compare.outputs.same == 'false'
        uses: docker/build-push-action@v5
        with:
          context: ./SPlayer
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            wudiming/prosp:latest
            wudiming/prosp:${{ env.RELEASE_TAG }}

      - name: 更新 tag 文件并提交
        if: steps.compare.outputs.same == 'false'
        run: |
          echo "${{ env.RELEASE_TAG }}" > ${{ env.LOCAL_TAG_FILE }}
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          git add ${{ env.LOCAL_TAG_FILE }}
          git commit -m "chore: 更新 tag.md 为 ${{ env.RELEASE_TAG }}"
          git push
